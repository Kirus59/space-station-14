
using Content.Client.SS220.UserInterface.Utility;
using Content.Shared.SS220.SpaceWars.Party;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.SS220.SpaceWars.Party.UI.CustomControls;

[GenerateTypedNameReferences]
public sealed partial class ReceivedPartyInvitePanel : PanelContainer
{
    [Dependency] private readonly IPartyManager _party = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    public readonly IPartyInvite Invite;
    private readonly QuickConfirmationWindow _confirmationWindow = new();

    public ReceivedPartyInvitePanel(IPartyInvite invite)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        DebugTools.Assert(invite.Kind is PartyInviteKind.Received);
        DebugTools.AssertEqual(invite.Target, _player.LocalUser);
        Invite = invite;

        _party.InviteUpdated += args =>
        {
            if (args != Invite)
                return;

            Refresh();
        };

        AcceptButton.OnPressed += _ => Accept();
        DenyButton.OnPressed += _ => Deny();

        PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(60, 60, 60) };

        Refresh();
    }

    public void Refresh()
    {
        SenderLabel.Text = Loc.GetString("ui-received-invite-panel-sender-label", ("sendername", Invite.SenderName));
    }

    private void Accept()
    {
        if (_party.LocalMember is { } member)
        {
            _confirmationWindow.ClearEvents();

            var message = member.Role switch
            {
                PartyMemberRole.Host => Loc.GetString("ui-received-invite-tab-leave-party-warning-host"),
                _ => Loc.GetString("ui-received-invite-tab-leave-party-warning")
            };

            _confirmationWindow.SetMessage(message);
            _confirmationWindow.OnConfirmed += () => _party.AcceptInviteRequest(Invite.Id);
            _confirmationWindow.OpenCentered();
        }
        else
            _party.AcceptInviteRequest(Invite.Id);
    }

    private void Deny()
    {
        _party.DenyInviteRequest(Invite.Id);
    }
}
