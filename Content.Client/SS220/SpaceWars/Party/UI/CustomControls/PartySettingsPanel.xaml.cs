using Content.Shared.SS220.SpaceWars.Party;
using Pidgin;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Diagnostics.CodeAnalysis;

namespace Content.Client.SS220.SpaceWars.Party.UI.CustomControls;

[GenerateTypedNameReferences]
public sealed partial class PartySettingsPanel : PanelContainer
{
    [Dependency] private readonly IPartyManager _partyManager = default!;
    [Dependency] private readonly ILocalizationManager _localizationManager = default!;

    private Dictionary<string, Control> _settings = new();

    public PartySettingsPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Update()
    {
        SettingsBox.RemoveAllChildren();

        var maxMembers = _partyManager.CurrentParty?.Settings.MaxMembers ?? 0;
        AddLineEditOption(nameof(PartySettings.MaxMembers), maxMembers.ToString());
    }

    public PartySettingsState GetSettingsState()
    {
        var state = new PartySettingsState();
        if (TryGetSettingValue<string>(nameof(PartySettings.MaxMembers), out var value) &&
            uint.TryParse(value, out var maxMembers))
            state.MaxMembers = maxMembers;

        return state;
    }

    private void AddLineEditOption(string name, string defaultText)
    {
        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true
        };

        var label = new Label()
        {
            Text = Loc.GetString($"ui-PartySettings-LineEdit-{name}-label"),
        };
        box.AddChild(label);

        var edit = new LineEdit
        {
            Text = defaultText,
            PlaceHolder = _localizationManager.TryGetString($"ui-PartySettings-LineEdit-{name}-placeholder", out var placeHolder) ? placeHolder : null
        };
        box.AddChild(edit);

        SettingsBox.AddChild(box);
        _settings[name] = edit;
    }

    private bool TryGetSettingValue<T>(string name, [NotNullWhen(true)] out T? value)
    {
        value = default(T);
        if (!_settings.TryGetValue(name, out var control))
            return false;

        object? result = null;
        switch (control)
        {
            case LineEdit lineEdit:
                result = lineEdit.Text;
                break;
            default:
                break;
        }

        if (result is not T)
            return false;

        value = (T)result;
        return true;
    }
}
