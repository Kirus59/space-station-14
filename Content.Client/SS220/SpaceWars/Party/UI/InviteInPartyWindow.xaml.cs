using Content.Client.SS220.SpaceWars.Party.UI.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Threading.Tasks;

namespace Content.Client.SS220.SpaceWars.Party.UI;

[GenerateTypedNameReferences]
public sealed partial class InviteInPartyWindow : DefaultWindow
{
    [Dependency] private readonly IPartyManager _partyManager = default!;

    public InviteInPartyWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        InvitesPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(32, 32, 40) };
        InputLine.PlaceHolder = Loc.GetString("ui-InviteInPartyWindow-Placeholder");
        InviteButton.OnPressed += _ => SendInvite();

        _partyManager.OnSendedInviteAdded += _ => Populate();
        _partyManager.OnSendedInviteRemoved += _ => Populate();
        _partyManager.OnSendedInviteUpdated += _ => Populate();

        _partyManager.OnSendInviteFail += reason => AddFailReason(reason, TimeSpan.FromSeconds(10));

        Populate();
    }

    public void Populate()
    {
        var invites = _partyManager.SendedInvites;

        var invitesCountInfo = Loc.GetString("ui-InviteInPartyWindow-sended-invites-count", ("count", invites.Count), ("limit", 5));
        InvitesCountLabel.Text = invitesCountInfo;

        InvitesContainer.RemoveAllChildren();
        foreach (var (id, invite) in invites)
        {
            var control = new SendedInvitePanel(invite);
            control.Margin = new Thickness(5);
            control.CancelButton.OnPressed += _ =>
            {
                _partyManager.DeleteInvite(id);
            };
            InvitesContainer.AddChild(control);
        }
    }

    public void SendInvite()
    {
        var text = InputLine.Text;
        if (string.IsNullOrEmpty(text))
            return;

        _partyManager.SendInvite(text);
    }

    private void AddFailReason(string reason, TimeSpan? showTime)
    {
        var msg = new FormattedMessage();
        msg.PushColor(Color.Red);
        msg.AddText(reason);
        msg.Pop();

        FailReasonLabel.SetMessage(msg);

        if (showTime != null)
            RemoveFailReason((int)showTime.Value.TotalMilliseconds);
    }

    private async void RemoveFailReason(int delay)
    {
        await Task.Delay(delay);

        FailReasonLabel.Text = null;
    }
}
