
using Content.Client.SS220.SpaceWars.Party.UI.CustomControls;
using Content.Client.SS220.UserInterface.Utility;
using Content.Client.Stylesheets;
using Content.Shared.SS220.SpaceWars.Party;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.SS220.SpaceWars.Party.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class MainTab : Control
{
    [Dependency] private readonly IPartyManager _partyManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private InviteInPartyWindow _inviteWindow = new InviteInPartyWindow();

    public MainTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        MembersPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(32, 32, 40) };
        ChatPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(32, 32, 40) };
        MembersContainer.OnResized += UpdateMembers;
        Update();
    }

    public void Update()
    {
        UpdateMembers();
        UpdateButtons();
    }

    public void UpdateMembers()
    {
        MembersContainer.RemoveAllChildren();

        if (_partyManager.CurrentParty is not { } currentParty)
            return;

        var members = currentParty.Members.OrderByDescending(x => x.Role).ThenBy(x => x.Name);
        foreach (var member in members)
        {
            var control = new PartyUserInfoPanel();
            control.Margin = new Thickness(5, 5, 5, 0);
            control.Populate(member.Name, member.Role, member.Connected);
            MembersContainer.AddChild(control);
        }
    }

    public void UpdateButtons()
    {
        ButtonContainer.RemoveAllChildren();

        if (_partyManager.CurrentParty is not { } currentParty)
        {
            ButtonContainer.AddChild(NewCreatePartyButton());
        }
        else if (currentParty.LocalUserInfo.Role is PartyRole.Leader)
        {
            ButtonContainer.AddChild(NewDisbandPartyButton());
            ButtonContainer.AddChild(NewInviteInPartyButton());
        }
        else
        {
            ButtonContainer.AddChild(NewLeavePartyButton());
        }
    }

    public Button NewCreatePartyButton()
    {
        var button = new Button();
        button.Text = Loc.GetString("ui-PartyMenu-MainTab-CreatePartyButton");
        button.OnPressed += _ =>
        {
            _partyManager.SendCreatePartyRequest();
        };
        return button;
    }

    public Button NewDisbandPartyButton()
    {
        var text = Loc.GetString("ui-PartyMenu-MainTab-DisbandPartyButton");
        var button = new ConfirmableButton(text, null);

        var firstClickText = "Вы уверены?";
        button.SetClickState(1, new ConfirmableButtonState(firstClickText, StyleNano.ButtonColorCautionDefault));
        button.OnConfirmed += _partyManager.SendDisbandPartyRequest;
        button.ClicksActionWhenConfirmed = ConfirmableButtonClicksAction.Decreace;

        return button;
    }

    public Button NewLeavePartyButton()
    {
        var text = Loc.GetString("ui-PartyMenu-MainTab-LeavePartyButton");
        var button = new ConfirmableButton(text, null);

        var firstClickText = "Вы уверены?";
        button.SetClickState(1, new ConfirmableButtonState(firstClickText, StyleNano.ButtonColorCautionDefault));
        button.OnConfirmed += _partyManager.SendLeavePartyRequest;
        button.ClicksActionWhenConfirmed = ConfirmableButtonClicksAction.Decreace;

        return button;
    }

    public Button NewInviteInPartyButton()
    {
        var button = new Button();
        button.Text = Loc.GetString("ui-PartyMenu-MainTab-InviteInPartyButton");
        button.OnPressed += _ =>
        {
            _inviteWindow.OpenCentered();
        };
        return button;
    }
}
