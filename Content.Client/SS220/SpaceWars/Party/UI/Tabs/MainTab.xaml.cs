
using Content.Client.SS220.SpaceWars.Party.UI.CustomControls;
using Content.Client.SS220.UserInterface.Utility;
using Content.Client.Stylesheets;
using Content.Shared.SS220.SpaceWars.Party;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Linq;
using System.Numerics;

namespace Content.Client.SS220.SpaceWars.Party.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class MainTab : Control
{
    [Dependency] private readonly IPartyManager _partyManager = default!;

    private InviteInPartyWindow _inviteWindow = new InviteInPartyWindow();

    private Dictionary<string, PartyUserInfoPanel> _userPanels = new();

    public MainTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _partyManager.OnChatMessageReceived += AddChatMessage;

        MembersPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(32, 32, 40) };
        ChatPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(32, 32, 40) };
        MembersContainer.OnResized += UpdateMembers;
        Update();
    }

    public void Update()
    {
        UpdateMembers();
        UpdateChat();
        UpdateButtons();
    }

    public void UpdateMembers()
    {
        var panelsToRemove = _userPanels.Keys.ToList();

        if (_partyManager.CurrentParty is { } currentParty)
        {
            var members = currentParty.Members.OrderByDescending(x => x.Role).ThenBy(x => x.Name);
            foreach (var member in members)
            {
                if (!_userPanels.TryGetValue(member.Name, out var userPanel))
                {
                    userPanel = new PartyUserInfoPanel(member);
                    userPanel.Margin = new Thickness(5, 5, 5, 0);
                    MembersContainer.AddChild(userPanel);
                    _userPanels.Add(member.Name, userPanel);

                    if (member.Role != PartyRole.Leader &&
                        _partyManager.LocalPartyUserInfo?.Role == PartyRole.Leader)
                        userPanel.BottomBox.AddChild(NewKickButton(member.Id));
                }
                else
                {
                    userPanel.Populate(member);
                    panelsToRemove.Remove(member.Name);
                }
            }
        }

        foreach (var key in panelsToRemove)
        {
            if (_userPanels.TryGetValue(key, out var panel))
                MembersContainer.RemoveChild(panel);

            _userPanels.Remove(key);
        }
    }

    #region Chat
    public void UpdateChat()
    {
        if (_partyManager.CurrentParty is null)
            ChatBox.RemoveAllChildren();
    }

    public void AddChatMessage(string message)
    {
        var label = new RichTextLabel()
        {
            Margin = new Thickness(5, 2, 5, 0)
        };

        var msg = new FormattedMessage();
        msg.AddMarkupPermissive(message);

        label.SetMessage(msg);
        ChatBox.AddChild(label);
    }
    #endregion

    public void UpdateButtons()
    {
        ButtonContainer.RemoveAllChildren();

        if (_partyManager.CurrentParty is not { } currentParty)
        {
            ButtonContainer.AddChild(NewCreatePartyButton());
        }
        else if (currentParty.LocalUserInfo.Role is PartyRole.Leader)
        {
            ButtonContainer.AddChild(NewDisbandPartyButton());
            ButtonContainer.AddChild(NewInviteInPartyButton());
        }
        else
        {
            ButtonContainer.AddChild(NewLeavePartyButton());
        }
    }

    #region Buttons
    private Button NewCreatePartyButton()
    {
        var button = new Button();
        button.Text = Loc.GetString("ui-PartyMenu-MainTab-CreatePartyButton");
        button.OnPressed += _ =>
        {
            _partyManager.SendCreatePartyRequest();
        };
        return button;
    }

    private Button NewDisbandPartyButton()
    {
        var text = Loc.GetString("ui-PartyMenu-MainTab-DisbandPartyButton");
        var button = new ConfirmableButton(text, null);

        var firstClickText = "Вы уверены?";
        button.SetClickState(1, new ConfirmableButtonState(firstClickText, StyleNano.ButtonColorCautionDefault));
        button.OnConfirmed += _partyManager.SendDisbandPartyRequest;
        button.ClicksActionWhenConfirmed = ConfirmableButtonClicksAction.Decreace;

        return button;
    }

    private Button NewLeavePartyButton()
    {
        var text = Loc.GetString("ui-PartyMenu-MainTab-LeavePartyButton");
        var button = new ConfirmableButton(text, null);

        var firstClickText = "Вы уверены?";
        button.SetClickState(1, new ConfirmableButtonState(firstClickText, StyleNano.ButtonColorCautionDefault));
        button.OnConfirmed += _partyManager.SendLeavePartyRequest;
        button.ClicksActionWhenConfirmed = ConfirmableButtonClicksAction.Decreace;

        return button;
    }

    private Button NewInviteInPartyButton()
    {
        var button = new Button();
        button.Text = Loc.GetString("ui-PartyMenu-MainTab-InviteInPartyButton");
        button.OnPressed += _ =>
        {
            _inviteWindow.OpenCentered();
        };
        return button;
    }

    private TextureButton NewKickButton(uint partyUserId)
    {
        var button = new TextureButton()
        {
            MinSize = new Vector2(25, 25),
            Margin = new Thickness(0, 0, 5, 0),
            VerticalAlignment = VAlignment.Center
        };
        button.AddStyleClass(DefaultWindow.StyleClassWindowCloseButton);
        button.OnPressed += _ =>
        {
            _partyManager.SendKickFromPartyRequest(partyUserId);
        };

        var tooltip = new Tooltip();
        tooltip.SetMessage(FormattedMessage.FromMarkupPermissive(Loc.GetString("ui-PartyMenu-MainTab-KickButton-Tooltip")));
        button.TooltipSupplier = _ => tooltip;

        return button;
    }
    #endregion
}
