
using Content.Client.SS220.SpaceWars.Party.UI.CustomControls;
using Content.Client.SS220.UserInterface.Utility;
using Content.Client.Stylesheets;
using Content.Shared.SS220.SpaceWars.Party;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Utility;
using System.Linq;
using System.Numerics;

namespace Content.Client.SS220.SpaceWars.Party.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class PartyMainTab : Control
{
    [Dependency] private readonly IPartyManager _party = default!;
    [Dependency] private readonly IUserInterfaceManager _userInterface = default!;

    private readonly Dictionary<NetUserId, PartyMemberPanel> _memberPanels = [];

    private readonly CreatePartyWindow _createPartyWindow = new();
    private readonly LocalPartyInvitesWindow _localPartyInvitesWindow = new();
    private readonly PartySettingsWindow _partySettingsWindow = new();

    public PartyMainTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _party.ChatMessageReceived += AddChatMessage;

        MembersContainer.OnResized += RefreshMembers;
        Refresh();
    }

    public void Refresh()
    {
        RefreshMembers();
        RefreshChat();
        RefreshButtons();
        RefreshNotMemberOverlay();
    }

    private void RefreshMembers()
    {
        var toRemove = _memberPanels.Keys.ToList();
        MembersContainer.RemoveAllChildren();

        if (_party.LocalParty is { } party)
        {
            var members = party.Members.OrderByDescending(m => m.Role).ThenBy(m => m.Username);
            foreach (var member in members)
            {
                if (_memberPanels.TryGetValue(member.UserId, out var memberPanel))
                {
                    memberPanel.Refresh();
                    toRemove.Remove(member.UserId);
                }
                else
                {
                    memberPanel = new(member)
                    {
                        Margin = new Thickness(5, 5, 5, 0)
                    };

                    _memberPanels.Add(member.UserId, memberPanel);

                    if (_party.IsLocalPartyHost && member.Role is not PartyMemberRole.Host)
                        memberPanel.BottomBox.AddChild(NewKickButton(member));
                }

                MembersContainer.AddChild(memberPanel);
            }

            var membersLimit = party.Settings.MembersLimit;
            MaxMembersLabel.SetMessage(Loc.GetString("ui-party-main-tab-members-limit-label", ("count", members.Count()), ("limit", membersLimit)));
        }
        else
        {
            MaxMembersLabel.SetMessage(string.Empty);
        }

        foreach (var key in toRemove)
            _memberPanels.Remove(key);
    }

    #region Chat
    private void RefreshChat()
    {
        if (_party.LocalParty is null)
            ChatBox.RemoveAllChildren();
    }

    public void AddChatMessage(string message)
    {
        var label = new RichTextLabel()
        {
            Margin = new Thickness(5, 2, 5, 0)
        };

        var msg = new FormattedMessage();
        msg.AddMarkupPermissive(message);

        label.SetMessage(msg);
        ChatBox.AddChild(label);
    }
    #endregion

    private void RefreshButtons()
    {
        ButtonContainer.RemoveAllChildren();

        switch (_party.LocalParty)
        {
            case null:
                ButtonContainer.AddChild(NewCreatePartyButton());
                break;

            case not null when _party.IsLocalPartyHost:
                ButtonContainer.AddChild(NewDisbandPartyButton());
                ButtonContainer.AddChild(NewLocalPartyInvitesButton());
                ButtonContainer.AddChild(NewSettingsButton());
                break;

            case not null:
                ButtonContainer.AddChild(NewLeavePartyButton());
                break;
        }
    }

    #region Buttons
    private Button NewCreatePartyButton()
    {
        var button = new Button
        {
            Text = Loc.GetString("ui-party-main-tab-create-party-button")
        };
        button.OnPressed += _ =>
        {
            var pos = _userInterface.MousePositionScaled.Position;
            _createPartyWindow.Open(pos);
        };
        return button;
    }

    private ConfirmableButton NewDisbandPartyButton()
    {
        var text = Loc.GetString("ui-party-main-tab-disband-party-button");
        var button = new ConfirmableButton(text, null)
        {
            ClicksForConfirm = 2
        };

        var firstClickText = Loc.GetString("ui-party-main-tab-confirmable-button-are-you-sure");
        button.SetClickState(1, new ConfirmableButtonState(firstClickText, StyleNano.ButtonColorCautionDefault));
        button.OnConfirmed += _party.DisbandPartyRequest;

        return button;
    }

    private ConfirmableButton NewLeavePartyButton()
    {
        var text = Loc.GetString("ui-party-main-tab-leave-party-button");
        var button = new ConfirmableButton(text, null)
        {
            ClicksForConfirm = 2
        };

        var firstClickText = Loc.GetString("ui-party-main-tab-confirmable-button-are-you-sure");
        button.SetClickState(1, new ConfirmableButtonState(firstClickText, StyleNano.ButtonColorCautionDefault));
        button.OnConfirmed += _party.LeavePartyRequest;

        return button;
    }

    private Button NewLocalPartyInvitesButton()
    {
        var button = new Button
        {
            Text = Loc.GetString("ui-party-main-tab-local-party-invites-button")
        };

        button.OnPressed += _ =>
        {
            var pos = _userInterface.MousePositionScaled.Position;
            _localPartyInvitesWindow.Open(pos);
        };
        return button;
    }

    private Button NewSettingsButton()
    {
        var button = new Button
        {
            Text = Loc.GetString("ui-party-main-tab-settings-button")
        };

        button.OnPressed += _ =>
        {
            var pos = _userInterface.MousePositionScaled.Position;
            _partySettingsWindow.Open(pos);
        };
        return button;
    }

    private TextureButton NewKickButton(PartyMember member)
    {
        var button = new TextureButton()
        {
            MinSize = new Vector2(25, 25),
            Margin = new Thickness(0, 0, 5, 0),
            VerticalAlignment = VAlignment.Center
        };
        button.AddStyleClass(DefaultWindow.StyleClassWindowCloseButton);
        button.OnPressed += _ =>
        {
            _party.KickFromPartyRequest(member.UserId);
        };

        var tooltip = new Tooltip();
        tooltip.SetMessage(FormattedMessage.FromMarkupPermissive(Loc.GetString("ui-party-main-tab-kick-button-tooltip")));
        button.TooltipSupplier = _ => tooltip;

        return button;
    }
    #endregion

    private void RefreshNotMemberOverlay()
    {
        var visible = _party.LocalParty is null;
        NotMemberOverlay.Visible = visible;
        NotMemberLabel.Visible = visible;
    }
}
