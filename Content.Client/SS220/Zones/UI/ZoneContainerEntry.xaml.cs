
using Content.Shared.SS220.Zones.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneContainerEntry : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public Entity<ZonesContainerComponent> ZonesContainer;

    public Dictionary<EntityUid, ZoneEntry> ZoneEntries = new();

    private bool _collapsed;

    public ZoneContainerEntry(Entity<ZonesContainerComponent> entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        ZonesContainer = entity;

        CollapseButtonTexture.AddStyleClass(OptionButton.StyleClassOptionTriangle);
        ContainerButton.AddStyleClass(ContainerButton.StyleClassButton);
        CollapseButton.OnPressed += _ => ToggleCollapse();
        ContainerBackgroundPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(60, 60, 60) };
        Refresh();
    }

    public void Refresh()
    {
        ContainerIDLabel.Text = ZonesContainer.Owner.ToString();

        var name = "Unknown";
        if (_entityManager.TryGetComponent<MetaDataComponent>(ZonesContainer, out var meta) &&
            !string.IsNullOrEmpty(meta.EntityName) && !string.IsNullOrWhiteSpace(meta.EntityName))
            name = meta.EntityName;

        ContainerNameLabel.Text = name;

        var toDelete = ZoneEntries.ToDictionary();
        var toAdd = new Dictionary<EntityUid, ZoneEntry>();

        foreach (var netEnt in ZonesContainer.Comp.Zones)
        {
            if (!_entityManager.TryGetEntity(netEnt, out var entity) ||
                !_entityManager.TryGetComponent<ZoneComponent>(entity, out var zoneComp))
                continue;

            if (!toDelete.Remove(entity.Value))
                toAdd.Add(entity.Value, new ZoneEntry((entity.Value, zoneComp)));
        }

        foreach (var (key, value) in toDelete)
        {
            ZonesBox.RemoveChild(value);
            ZoneEntries.Remove(key);
        }

        foreach (var (key, value) in toAdd)
        {
            ZonesBox.AddChild(value);
            ZoneEntries.Add(key, value);
        }

        SortEntries();

        foreach (var value in ZoneEntries.Values)
            value.Refresh();
    }

    public void SortEntries()
    {
        var sorted = ZoneEntries.OrderBy(e => e.Key.Id).ToDictionary();
        ZonesBox.RemoveAllChildren();
        foreach (var value in sorted.Values)
            ZonesBox.AddChild(value);

        ZoneEntries = sorted;
    }

    public void ToggleCollapse()
    {
        _collapsed = !_collapsed;
        Collapsible.Visible = !_collapsed;
    }
}
