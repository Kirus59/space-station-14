
using Content.Shared.SS220.Zones.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneContainerEntry : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public Entity<ZonesContainerComponent> ZonesContainer;

    public Dictionary<EntityUid, ZoneEntry> ZoneEntries = new();

    public Action<ZoneEntry>? ZoneEntryToggled;

    private bool _collapsed;

    public ZoneContainerEntry(Entity<ZonesContainerComponent> entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        ZonesContainer = entity;

        CollapseButtonTexture.AddStyleClass(OptionButton.StyleClassOptionTriangle);
        ZoneContainerButton.AddStyleClass(ContainerButton.StyleClassButton);
        CollapseButton.OnPressed += _ => SetCollapsed(!_collapsed);
        ContainerBackgroundPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex("#2F2F3B") };
        Refresh();
    }

    public void Refresh()
    {
        ContainerIDLabel.Text = _entityManager.GetNetEntity(ZonesContainer).ToString();

        var name = "Unknown";
        if (_entityManager.TryGetComponent<MetaDataComponent>(ZonesContainer, out var meta) &&
            !string.IsNullOrEmpty(meta.EntityName) && !string.IsNullOrWhiteSpace(meta.EntityName))
            name = meta.EntityName;

        ContainerNameLabel.Text = name;

        var toDelete = ZoneEntries.ToDictionary();
        var toAdd = new Dictionary<EntityUid, ZoneEntry>();

        foreach (var netEnt in ZonesContainer.Comp.Zones)
        {
            if (!_entityManager.TryGetEntity(netEnt, out var entity) ||
                !_entityManager.TryGetComponent<ZoneComponent>(entity, out var zoneComp))
                continue;

            if (!toDelete.Remove(entity.Value))
                toAdd.Add(entity.Value, GetZoneEntry((entity.Value, zoneComp)));
        }

        foreach (var (key, value) in toDelete)
        {
            ZonesBox.RemoveChild(value);
            ZoneEntries.Remove(key);
        }

        foreach (var (key, value) in toAdd)
        {
            ZonesBox.AddChild(value);
            ZoneEntries.Add(key, value);
        }

        SortEntries();

        foreach (var value in ZoneEntries.Values)
            value.Refresh();
    }

    public void SortEntries()
    {
        var sorted = ZoneEntries.OrderBy(e => e.Key.Id).ToDictionary();
        ZonesBox.RemoveAllChildren();
        foreach (var value in sorted.Values)
            ZonesBox.AddChild(value);

        ZoneEntries = sorted;
    }

    public void SetCollapsed(bool value)
    {
        _collapsed = value;
        CollapsibleBox.Visible = !_collapsed;
    }

    public void ApplyFilter(string? filter)
    {
        if (string.IsNullOrEmpty(filter))
        {
            Visible = true;
            ApplyToZoneEntries(null);
            return;
        }

        var containerFiltering = GetFilteringString();
        if (containerFiltering.Contains(filter))
        {
            Visible = true;
            ApplyToZoneEntries(null);
            return;
        }

        Visible = ApplyToZoneEntries(filter);

        bool ApplyToZoneEntries(string? filter)
        {
            var isVisible = false;
            foreach (var entry in ZoneEntries.Values)
            {
                if (string.IsNullOrEmpty(filter))
                {
                    entry.Visible = true;
                    continue;
                }

                var filtering = entry.GetFilteringString();
                var visible = filtering.Contains(filter);
                if (visible)
                    isVisible = true;

                entry.Visible = visible;
            }

            return isVisible;
        }
    }

    public string GetFilteringString()
    {
        return $"{ContainerIDLabel.Text} {ContainerNameLabel.Text}";
    }

    private ZoneEntry GetZoneEntry(Entity<ZoneComponent> entity)
    {
        var entry = new ZoneEntry(entity);
        entry.OnToggled += _ => ZoneEntryToggled?.Invoke(entry);
        return entry;
    }
}
