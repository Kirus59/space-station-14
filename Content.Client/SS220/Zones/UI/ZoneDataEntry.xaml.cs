using Content.Shared.SS220.Zones.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneDataEntry : Collapsible
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public Entity<ZonesDataComponent> ZonesData;

    public Dictionary<EntityUid, ZoneEntry> ZoneEntries = new();

    public ZoneDataEntry(Entity<ZonesDataComponent> entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        ZonesData = entity;
    }

    public void Refresh()
    {
        var toDelete = ZoneEntries.ToDictionary();
        var toAdd = new Dictionary<EntityUid, ZoneEntry>();

        foreach (var netEnt in ZonesData.Comp.Zones)
        {
            if (!_entityManager.TryGetEntity(netEnt, out var entity) ||
                !_entityManager.TryGetComponent<ZoneComponent>(entity, out var zoneComp))
                continue;

            if (!toDelete.Remove(entity.Value))
                toAdd.Add(entity.Value, GetZoneEntry((entity.Value, zoneComp)));
        }

        foreach (var (key, value) in toDelete)
        {
            ZonesContainer.RemoveChild(value);
            ZoneEntries.Remove(key);
        }

        foreach (var (key, value) in toAdd)
        {
            ZonesContainer.AddChild(value);
            ZoneEntries.Add(key, value);
        }

        SortEntries();
    }

    public void SortEntries()
    {
        var sorted = ZoneEntries.OrderBy(e => e.Key.Id).ToDictionary();
        ZonesContainer.RemoveAllChildren();
        foreach (var value in sorted.Values)
            ZonesContainer.AddChild(value);

        ZoneEntries = sorted;
    }

    private ZoneEntry GetZoneEntry(Entity<ZoneComponent> entity)
    {
        return new ZoneEntry(entity);
    }
}
