// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.SS220.BoxLayout;
using Content.Client.SS220.Overlays;
using Content.Client.SS220.Zones.Systems;
using Content.Shared.SS220.Maths;
using Content.Shared.SS220.Zones.Components;
using Content.Shared.SS220.Zones.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using System.Numerics;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneParamsPanel : PanelContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IBoxLayoutManager _boxLayoutManager = default!;
    private readonly ZonesSystem _zones = default!;

    public Action<ZoneParamsState>? ParamsChanged;

    public Entity<ZoneComponent>? ZoneEntity
    {
        get => _zoneEntity;
        set => SetZoneEntity(value);
    }

    private Entity<ZoneComponent>? _zoneEntity;

    public ZoneParamsState CurParams
    {
        get => _curParams;
        set
        {
            _curParams = value;
            CancelLayout();
            Refresh();
            ParamsChanged?.Invoke(value);
        }
    }

    private ZoneParamsState _curParams;

    public ZoneParamsState OriginalParams => _originalParams;
    private ZoneParamsState _originalParams;

    private BoxLayoutMode _layoutMode = BoxLayoutMode.Adding;

    private BoxesOverlay _overlay;
    private ZoneParamsBoxesOverlayProvider _overlayProvider;

    public ZoneParamsPanel() : this(null) { }

    public ZoneParamsPanel(Entity<ZoneComponent>? entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _overlay = BoxesOverlay.GetOverlay();
        _overlayProvider = new ZoneParamsBoxesOverlayProvider(this);

        _zones = _entityManager.System<ZonesSystem>();
        SetZoneEntity(entity);

        SizeOptionsBackground.PanelOverride = new StyleBoxFlat()
        {
            BackgroundColor = new Color(32, 32, 32),
            BorderColor = new Color(128, 128, 128),
            BorderThickness = new Thickness(2)
        };

        AddBoxButton.OnToggled += e =>
        {
            if (e.Pressed)
                StartLayout(BoxLayoutMode.Adding);
            else
                CancelLayout();
        };
        CutBoxButton.OnToggled += e =>
        {
            if (e.Pressed)
                StartLayout(BoxLayoutMode.Cutting);
            else
                CancelLayout();
        };
        ShowChangesButton.OnToggled += e => SetOverlay(e.Pressed);
    }

    protected override void ExitedTree()
    {
        RemoveLayoutReact();
        SetOverlay(false);
        base.ExitedTree();
    }

    public ZoneParamsPanel(ZoneParamsState @params) : this(null)
    {
        CurParams = @params;
        Refresh();
    }

    public void Refresh()
    {
        NameLineEdit.Text = CurParams.Name;
        PrototypeIDLineEdit.Text = CurParams.ProtoId;
        HexColorLineEdit.Text = CurParams.Color.ToHex();
        ContainerNetIDLineEdit.Text = CurParams.Container.IsValid() ? CurParams.Container.ToString() : string.Empty;

        Box2ListContainer.RemoveAllChildren();
        foreach (var box in CurParams.Boxes)
        {
            var entry = new ZoneBoxEntry(box);
            Box2ListContainer.AddChild(entry);
        }

        _overlayProvider.Refresh();
    }

    public void SetZoneEntity(Entity<ZoneComponent>? entity)
    {
        _zoneEntity = entity;
        _originalParams = entity?.Comp.ZoneParams?.GetState() ?? new ZoneParamsState();
        CurParams = _originalParams;
    }

    private void StartLayout(BoxLayoutMode mode)
    {
        if (_boxLayoutManager.Active)
            return;

        _layoutMode = mode;

        switch (mode)
        {
            case BoxLayoutMode.Adding:
                _boxLayoutManager.StartNewBox();
                break;

            case BoxLayoutMode.Cutting:
                _boxLayoutManager.StartNewBox();
                _boxLayoutManager.SetColor(Color.Red);
                break;
        }

        AddLayotReact();
        _boxLayoutManager.SetOverlay(true);
    }

    private void CancelLayout()
    {
        if (!_boxLayoutManager.Active)
            return;

        _boxLayoutManager.Cancel();
        RemoveLayoutReact();
    }

    private void AddLayotReact()
    {
        _boxLayoutManager.Ended += OnLayoutEnded;
        _boxLayoutManager.Cancelled += OnLayoutCancelled;
        _boxLayoutManager.SetOverlay(true);
    }

    private void RemoveLayoutReact()
    {
        _boxLayoutManager.Ended -= OnLayoutEnded;
        _boxLayoutManager.Cancelled -= OnLayoutCancelled;
        _boxLayoutManager.SetOverlay(false);

        AddBoxButton.Pressed = false;
        CutBoxButton.Pressed = false;
    }

    private void OnLayoutEnded(BoxLayoutManager.BoxParams @params)
    {
        if (@params.Parent != CurParams.Container)
            return;

        var newBoxes = CurParams.Boxes.ToList();
        switch (_layoutMode)
        {
            case BoxLayoutMode.Adding:
                newBoxes.Add(@params.Box);
                break;

            case BoxLayoutMode.Cutting:
                newBoxes = MathHelperExtensions.SubstructBox(newBoxes, @params.Box).ToList();
                break;
        }

        newBoxes = newBoxes.Select(b =>
        {
            var x1 = MathF.Round(b.BottomLeft.X, 2);
            var y1 = MathF.Round(b.BottomLeft.Y, 2);
            var x2 = MathF.Round(b.TopRight.X, 2);
            var y2 = MathF.Round(b.TopRight.Y, 2);
            return Box2.FromTwoPoints(new Vector2(x1, y1), new Vector2(x2, y2));
        }).ToList();

        var newParams = CurParams;
        newParams.ChangeState((ref ZoneParamsState p) =>
        {
            p.Boxes = newBoxes.ToHashSet();
        });
        CurParams = newParams;
    }

    private void OnLayoutCancelled()
    {
        RemoveLayoutReact();
        _boxLayoutManager.SetOverlay(false);
    }

    private (EntityUid Parent, List<Box2> Boxes) GetAddedBoxes()
    {
        var parent = _entityManager.GetEntity(CurParams.Container);
        var result = CurParams.Boxes.ToList();
        if (parent == _entityManager.GetEntity(_originalParams.Container))
            foreach (var box in _originalParams.Boxes)
                result = MathHelperExtensions.SubstructBox(result, box).ToList();

        return (parent, result);
    }

    private (EntityUid Parent, List<Box2> Boxes) GetDeletedBoxes()
    {
        var parent = _entityManager.GetEntity(_originalParams.Container);
        var result = _originalParams.Boxes.ToList();
        if (parent == _entityManager.GetEntity(CurParams.Container))
            foreach (var box in CurParams.Boxes)
                result = MathHelperExtensions.SubstructBox(result, box).ToList();

        return (parent, result);
    }

    public ZoneParamsState GetParams()
    {
        return CurParams;
    }

    public void SetOverlay(bool enabled)
    {
        if (enabled)
            _overlay.AddProvider(_overlayProvider);
        else
            _overlay.RemoveProvider(_overlayProvider);
    }

    private enum BoxLayoutMode
    {
        Adding,
        Cutting
    }

    private sealed class ZoneParamsBoxesOverlayProvider : BoxesOverlay.BoxesOverlayProvider
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private ZoneParamsPanel _panel;
        private (EntityUid Parent, List<Box2> Boxes) _addedBoxes = new();
        private (EntityUid Parent, List<Box2> Boxes) _deletedBoxes = new();

        private const float ColorAlpha = 0.5f;

        public ZoneParamsBoxesOverlayProvider(ZoneParamsPanel panel) : base()
        {
            _panel = panel;
        }

        public void Refresh()
        {
            _addedBoxes = _panel.GetAddedBoxes();
            _deletedBoxes = _panel.GetDeletedBoxes();
        }

        public override List<BoxesOverlay.BoxesData> GetBoxesDatas()
        {
            var result = new List<BoxesOverlay.BoxesData>();

            if (_addedBoxes.Boxes.Count > 0 && _addedBoxes.Parent.IsValid())
            {
                var data = new BoxesOverlay.BoxesData(_addedBoxes.Parent);
                data.Boxes = _addedBoxes.Boxes.ToHashSet();
                data.Color = Color.Green.WithAlpha(ColorAlpha);
                result.Add(data);
            }

            if (_deletedBoxes.Boxes.Count > 0 && _deletedBoxes.Parent.IsValid())
            {
                var data = new BoxesOverlay.BoxesData(_deletedBoxes.Parent);
                data.Boxes = _deletedBoxes.Boxes.ToHashSet();
                data.Color = Color.Red.WithAlpha(ColorAlpha);
                result.Add(data);
            }

            return result;
        }
    }
}
