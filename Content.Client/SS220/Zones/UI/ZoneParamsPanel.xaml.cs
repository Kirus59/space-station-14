// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.SS220.BoxLayout;
using Content.Client.SS220.Overlays;
using Content.Client.SS220.Zones.Systems;
using Content.Client.SS220.Zones.UI.CustomControls;
using Content.Client.Stylesheets;
using Content.Shared.SS220.Maths;
using Content.Shared.SS220.Zones.Components;
using Content.Shared.SS220.Zones.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using System.Numerics;
using static Content.Shared.SS220.Zones.Systems.ZoneParams;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneParamsPanel : PanelContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IBoxLayoutManager _boxLayoutManager = default!;

    private readonly ZonesSystem _zones = default!;

    public Action<ZoneParams>? ParamsChanged;

    public Entity<ZoneComponent>? ZoneEntity
    {
        get => _zoneEntity;
        set => SetZoneEntity(value);
    }

    private Entity<ZoneComponent>? _zoneEntity;

    public ZoneParams CurParams
    {
        get => _curParams;
        set
        {
            _curParams = value;
            CancelLayout();
            Refresh();
            ParamsChanged?.Invoke(value);
        }
    }
    private ZoneParams _curParams = default!;

    public ZoneParams OriginalParams => _originalParams;
    private ZoneParams _originalParams = default!;

    private BoxLayoutMode _layoutMode = BoxLayoutMode.Adding;

    private BoxesOverlay _overlay;
    private ZoneParamsBoxesOverlayProvider _overlayProvider;

    private ZoneColorSelectorPopup _selectorPopup = new();

    public ZoneParamsPanel() : this(null) { }

    public ZoneParamsPanel(Entity<ZoneComponent>? entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _overlay = BoxesOverlay.GetOverlay();
        _overlayProvider = new ZoneParamsBoxesOverlayProvider(this);

        _zones = _entityManager.System<ZonesSystem>();

        SizeOptionsBackground.PanelOverride = new StyleBoxFlat()
        {
            BackgroundColor = new Color(32, 32, 32),
            BorderColor = new Color(128, 128, 128),
            BorderThickness = new Thickness(2)
        };

        AddBoxButton.OnToggled += e =>
        {
            if (e.Pressed)
                StartLayout(BoxLayoutMode.Adding);
            else
                CancelLayout();
        };
        CutBoxButton.OnToggled += e =>
        {
            if (e.Pressed)
                StartLayout(BoxLayoutMode.Cutting);
            else
                CancelLayout();
        };
        ShowChangesButton.OnToggled += e => SetOverlay(e.Pressed);

        NameLineEdit.OnFocusExit += _ => Refresh();
        NameLineEdit.OnTextEntered += args =>
        {
            CurParams.Name = args.Text;
            Refresh();
        };

        PrototypeIDLineEdit.OnFocusExit += _ => Refresh();
        PrototypeIDLineEdit.OnTextEntered += args =>
        {
            CurParams.ProtoID = args.Text;
            Refresh();
        };

        HexColorLineEdit.OnFocusExit += _ => Refresh();
        HexColorLineEdit.OnTextEntered += args =>
        {
            if (Color.TryParse(args.Text, out var color))
            {
                CurParams.Color = color;
                Refresh();
            }
        };

        ContainerNetIDLineEdit.OnFocusExit += _ => Refresh();
        ContainerNetIDLineEdit.OnTextEntered += args =>
        {
            if (NetEntity.TryParse(args.Text, out var netEnt) &&
                _zones.IsValidContainer(_entityManager.GetEntity(netEnt)))
            {
                CurParams.Container = netEnt;
                Refresh();
            }
        };

        AttachToGridCheckbox.OnPressed += _ =>
        {
            CurParams.AttachToGrid = AttachToGridCheckbox.Pressed;
            Refresh();
        };

        ColorSelectorButton.AddStyleClass(StyleNano.StyleClassChatFilterOptionButton);
        ColorSelectorButton.OnPressed += _ =>
        {
            _selectorPopup.SetColor(CurParams.Color);

            var globalPos = ColorSelectorButton.GlobalPosition;
            var box = UIBox2.FromDimensions(globalPos, _selectorPopup.MinSize);
            _selectorPopup.Open(box);
        };

        _selectorPopup.OnColorSelected += color =>
        {
            CurParams.Color = color;
            Refresh();
        };
        _selectorPopup.OnVisibilityChanged += args =>
        {
            ColorSelectorButton.Pressed = args.Visible;
            Refresh();
        };

        foreach (var value in Enum.GetValues<CutSpaceOptions>())
            CutSpaceOptionSelector.AddItem(Loc.GetString($"zone-cut-space-option-{value}"), (int)value);

        CutSpaceOptionSelector.OnItemSelected += args =>
        {
            CurParams.CutSpaceOption = (CutSpaceOptions)args.Id;
            Refresh();
        };

        SetZoneEntity(entity);
    }

    protected override void ExitedTree()
    {
        _selectorPopup.Close();
        RemoveLayoutReact();
        SetOverlay(false);
        base.ExitedTree();
    }

    public void Refresh()
    {
        _selectorPopup.Close();

        NameLineEdit.Text = CurParams.Name;
        PrototypeIDLineEdit.Text = CurParams.ProtoID;
        HexColorLineEdit.Text = CurParams.Color.ToHex();
        ContainerNetIDLineEdit.Text = CurParams.Container.IsValid() ? CurParams.Container.ToString() : string.Empty;
        AttachToGridCheckbox.Pressed = CurParams.AttachToGrid;
        CutSpaceOptionSelector.SelectId((int)CurParams.CutSpaceOption);

        Box2ListContainer.RemoveAllChildren();
        for (var i = 0; i < CurParams.OriginalRegion.Count; i++)
        {
            var box = CurParams.OriginalRegion[i];
            var entry = new ZoneBoxEntry(box);
            var index = i;
            entry.OnBoxChanged += newBox =>
            {
                var newSize = CurParams.OriginalRegion.ToList();
                newSize[index] = newBox;
                CurParams.SetOriginalSize(newSize);
            };
            Box2ListContainer.AddChild(entry);
        }

        _overlayProvider.Refresh();
    }

    public void SetZoneEntity(Entity<ZoneComponent>? entity)
    {
        _zoneEntity = entity;
        _originalParams = entity?.Comp.ZoneParams ?? new ZoneParams();
        if (string.IsNullOrEmpty(_originalParams.Name))
            _originalParams.Name = $"Zone {_zones.GetZonesCount() + 1}";

        CurParams = _originalParams.GetCopy();
    }

    private void StartLayout(BoxLayoutMode mode)
    {
        if (_boxLayoutManager.Active)
            return;

        _layoutMode = mode;

        switch (mode)
        {
            case BoxLayoutMode.Adding:
                _boxLayoutManager.StartNew();
                _boxLayoutManager.AttachToGrid = CurParams.AttachToGrid;
                break;

            case BoxLayoutMode.Cutting:
                _boxLayoutManager.StartNew();
                _boxLayoutManager.AttachToGrid = CurParams.AttachToGrid;
                _boxLayoutManager.SetColor(Color.Red);
                break;
        }

        AddLayotReact();
        _boxLayoutManager.SetOverlay(true);
    }

    private void CancelLayout()
    {
        if (!_boxLayoutManager.Active)
            return;

        _boxLayoutManager.Cancel();
    }

    private void AddLayotReact()
    {
        _boxLayoutManager.Ended += OnLayoutEnded;
        _boxLayoutManager.Cancelled += OnLayoutCancelled;
        _boxLayoutManager.SetOverlay(true);
    }

    private void RemoveLayoutReact()
    {
        _boxLayoutManager.Ended -= OnLayoutEnded;
        _boxLayoutManager.Cancelled -= OnLayoutCancelled;
        _boxLayoutManager.SetOverlay(false);

        AddBoxButton.Pressed = false;
        CutBoxButton.Pressed = false;
    }

    private void OnLayoutEnded(BoxLayoutManager.BoxParams @params)
    {
        var newParams = CurParams;
        if (!CurParams.Container.IsValid())
            newParams.Container = @params.Parent;
        else if (@params.Parent != CurParams.Container)
        {
            CancelLayout();
            return;
        }

        var newSize = CurParams.ActiveRegion.ToList();
        switch (_layoutMode)
        {
            case BoxLayoutMode.Adding:
                newSize.Add(@params.Box);
                break;

            case BoxLayoutMode.Cutting:
                var cutter = @params.Box;
                if (CurParams.AttachToGrid)
                    _zones.AttachToGrid(CurParams.Container, ref cutter);

                newSize = MathHelperExtensions.SubstructBox(newSize, cutter).ToList();
                break;
        }

        newSize = newSize.Select(b =>
        {
            var x1 = MathF.Round(b.BottomLeft.X, 2);
            var y1 = MathF.Round(b.BottomLeft.Y, 2);
            var x2 = MathF.Round(b.TopRight.X, 2);
            var y2 = MathF.Round(b.TopRight.Y, 2);
            return Box2.FromTwoPoints(new Vector2(x1, y1), new Vector2(x2, y2));
        }).ToList();

        newParams.SetOriginalSize(newSize);
        newParams.RecalculateRegions();
        CurParams = newParams;
    }

    private void OnLayoutCancelled()
    {
        RemoveLayoutReact();
        _boxLayoutManager.SetOverlay(false);
    }

    public ZoneParams GetParams()
    {
        return CurParams;
    }

    public void SetOverlay(bool enabled)
    {
        ShowChangesButton.Pressed = enabled;
        if (enabled)
            _overlay.AddProvider(_overlayProvider);
        else
            _overlay.RemoveProvider(_overlayProvider);
    }

    private enum BoxLayoutMode
    {
        Adding,
        Cutting
    }

    private sealed class ZoneParamsBoxesOverlayProvider : BoxesOverlay.BoxesOverlayProvider
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private ZoneParamsPanel _panel;
        private (EntityUid Parent, List<Box2> Boxes) _addedBoxes = new();
        private (EntityUid Parent, List<Box2> Boxes) _deletedBoxes = new();

        private const float ColorAlpha = 0.5f;

        public ZoneParamsBoxesOverlayProvider(ZoneParamsPanel panel) : base()
        {
            _panel = panel;
        }

        public void Refresh()
        {
            _addedBoxes = GetChanges(_panel.OriginalParams, _panel.CurParams);
            _deletedBoxes = GetChanges(_panel.CurParams, _panel.OriginalParams);
        }

        public override List<BoxesOverlay.BoxOverlayData> GetBoxesDatas()
        {
            var result = new List<BoxesOverlay.BoxOverlayData>();

            if (_addedBoxes.Boxes.Count > 0 && _addedBoxes.Parent.IsValid())
            {
                foreach (var box in _addedBoxes.Boxes)
                    result.Add(new BoxesOverlay.BoxOverlayData(_addedBoxes.Parent, box, Color.Green.WithAlpha(ColorAlpha)));
            }

            if (_deletedBoxes.Boxes.Count > 0 && _deletedBoxes.Parent.IsValid())
            {
                foreach (var box in _deletedBoxes.Boxes)
                    result.Add(new BoxesOverlay.BoxOverlayData(_deletedBoxes.Parent, box, Color.Red.WithAlpha(ColorAlpha)));
            }

            return result;
        }

        private (EntityUid Parent, List<Box2> Boxes) GetChanges(ZoneParams left, ZoneParams right)
        {
            var leftParent = _entityManager.GetEntity(left.Container);
            var rightParent = _entityManager.GetEntity(right.Container);

            var result = right.OriginalRegion.ToList();
            if (leftParent == rightParent)
                result = [.. MathHelperExtensions.SubstructBox(result, left.OriginalRegion)];

            return (rightParent, result);
        }
    }
}
