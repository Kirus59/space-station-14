using Content.Shared.SS220.Zones.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZonesControlWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private Dictionary<EntityUid, ZoneDataEntry> _zoneDataEntries = new();

    public ZonesControlWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        OnOpen += RefreshEntries;
        RefreshEntries();
    }

    public void RefreshEntries()
    {
        var toDelete = _zoneDataEntries.ToDictionary();
        var toAdd = new Dictionary<EntityUid, ZoneDataEntry>();

        var query = _entityManager.EntityQueryEnumerator<ZonesDataComponent>();
        while (query.MoveNext(out var uid, out var zoneData))
        {
            if (zoneData.Zones.Count <= 0)
                continue;

            if (!toDelete.Remove(uid))
                toAdd.Add(uid, GetZoneDataEntry((uid, zoneData)));
        }

        foreach (var (key, value) in toDelete)
        {
            ZonesContainersContainer.RemoveChild(value);
            _zoneDataEntries.Remove(key);
        }

        foreach (var (key, value) in toAdd)
        {
            ZonesContainersContainer.AddChild(value);
            _zoneDataEntries.Add(key, value);
        }

        SortEntries();
        foreach (var entry in _zoneDataEntries.Values)
            entry.Refresh();
    }

    public void SortEntries()
    {
        var sorted = _zoneDataEntries.OrderBy(e => e.Key).ToDictionary();
        ZonesContainersContainer.RemoveAllChildren();
        foreach (var value in sorted.Values)
            ZonesContainersContainer.AddChild(value);

        _zoneDataEntries = sorted;
    }

    private ZoneDataEntry GetZoneDataEntry(Entity<ZonesDataComponent> entity)
    {
        return new ZoneDataEntry(entity);
    }
}
