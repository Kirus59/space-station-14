using Content.Client.SS220.Zones.Systems;
using Content.Shared.SS220.Zones.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZonesControlWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly ZonesSystem _zones;

    private Dictionary<EntityUid, ZoneContainerEntry> _zoneContainerEntries = new();

    private ZoneEntry? _selectedZoneEntry;
    public ZonesControlWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _zones = _entityManager.System<ZonesSystem>();
        RefreshButton.OnPressed += _ => RefreshEntries();
        OverlayButton.OnToggled += e => _zones.SetOverlay(e.Pressed);
        SearchLineEdit.OnTextChanged += ApplySearchFilter;

        OnOpen += RefreshEntries;
        RefreshEntries();
    }

    public void RefreshEntries()
    {
        var toDelete = _zoneContainerEntries.ToDictionary();
        var toAdd = new Dictionary<EntityUid, ZoneContainerEntry>();

        var query = _entityManager.EntityQueryEnumerator<ZonesContainerComponent>();
        while (query.MoveNext(out var uid, out var zoneData))
        {
            if (zoneData.Zones.Count <= 0)
                continue;

            if (!toDelete.Remove(uid))
                toAdd.Add(uid, GetZoneDataEntry((uid, zoneData)));
        }

        foreach (var (key, value) in toDelete)
        {
            ZonesContainersContainer.RemoveChild(value);
            _zoneContainerEntries.Remove(key);
        }

        foreach (var (key, value) in toAdd)
        {
            ZonesContainersContainer.AddChild(value);
            _zoneContainerEntries.Add(key, value);
        }

        SortEntries();
        foreach (var entry in _zoneContainerEntries.Values)
            entry.Refresh();
    }

    public void SortEntries()
    {
        var sorted = _zoneContainerEntries.OrderBy(e => e.Key).ToDictionary();
        ZonesContainersContainer.RemoveAllChildren();
        foreach (var value in sorted.Values)
            ZonesContainersContainer.AddChild(value);

        _zoneContainerEntries = sorted;
    }

    private ZoneContainerEntry GetZoneDataEntry(Entity<ZonesContainerComponent> entity)
    {
        var entry = new ZoneContainerEntry(entity);
        entry.ZoneEntryToggled += OnZoneEntryToggled;
        return entry;
    }

    private void OnZoneEntryToggled(ZoneEntry entry)
    {
        if (_selectedZoneEntry == entry)
            DeselectEntry();
        else
            SelectEntry(entry);
    }

    private void SelectEntry(ZoneEntry entry)
    {
        if (_selectedZoneEntry is { } selected && selected != entry)
            selected.Pressed = false;

        entry.Pressed = true;
        _selectedZoneEntry = entry;
        _zones.SelectZone(entry.ZoneEntity);
    }

    private void DeselectEntry()
    {
        if (_selectedZoneEntry is { } selected)
            selected.Pressed = false;

        _selectedZoneEntry = null;
        _zones.SelectZone(null);
    }

    private void ApplySearchFilter(LineEdit.LineEditEventArgs args)
    {
        foreach (var entry in _zoneContainerEntries.Values)
            entry.ApplyFilter(args.Text);
    }
}
