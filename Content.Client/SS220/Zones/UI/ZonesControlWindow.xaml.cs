using Content.Client.SS220.StyleTools;
using Content.Client.SS220.Zones.Systems;
using Content.Shared.SS220.Zones.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using System.Numerics;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZonesControlWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly ZonesSystem _zones;

    private Dictionary<EntityUid, ZoneContainerEntry> _zoneContainerEntries = new();

    public ZoneEntry? SelectedZoneEntry
    {
        get => _selectedZoneEntry;
        set
        {
            _selectedZoneEntry = value;
            SetStateEntity(value?.ZoneEntity);
        }
    }

    private ZoneEntry? _selectedZoneEntry;
    private ZoneParamsPanel _statePanel;
    private Vector2 _baseMinSize;

    public ZonesControlWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _baseMinSize = MinSize;

        _zones = _entityManager.System<ZonesSystem>();

        _statePanel = new ZoneParamsPanel(null);
        OptionsPanel.PanelOverride = new StyleBoxFlat()
        {
            BackgroundColor = new Color(64, 64, 64),
            BorderColor = new Color(128, 128, 128),
            BorderThickness = new Thickness(2)
        };
        OptionsPanel.AddChild(_statePanel);

        RefreshButton.OnPressed += _ => RefreshEntries();
        OverlayButton.OnToggled += e => _zones.SetOverlay(e.Pressed);
        SearchLineEdit.OnTextChanged += ApplySearchFilter;

        OnOpen += RefreshEntries;
        RefreshEntries();
    }

    public void RefreshEntries()
    {
        var toDelete = _zoneContainerEntries.ToDictionary();
        var toAdd = new Dictionary<EntityUid, ZoneContainerEntry>();

        var query = _entityManager.EntityQueryEnumerator<ZonesContainerComponent>();
        while (query.MoveNext(out var uid, out var zoneData))
        {
            if (zoneData.Zones.Count <= 0)
                continue;

            if (!toDelete.Remove(uid))
                toAdd.Add(uid, GetZoneDataEntry((uid, zoneData)));
        }

        foreach (var (key, value) in toDelete)
        {
            if (SelectedZoneEntry != null &&
                value.ZoneEntries.ContainsValue(SelectedZoneEntry))
                DeselectEntry();

            ZonesContainersContainer.RemoveChild(value);
            _zoneContainerEntries.Remove(key);
        }

        foreach (var (key, value) in toAdd)
        {
            ZonesContainersContainer.AddChild(value);
            _zoneContainerEntries.Add(key, value);
        }

        SortEntries();
        foreach (var entry in _zoneContainerEntries.Values)
            entry.Refresh();
    }

    public void SortEntries()
    {
        var sorted = _zoneContainerEntries.OrderBy(e => e.Key).ToDictionary();
        ZonesContainersContainer.RemoveAllChildren();
        foreach (var value in sorted.Values)
            ZonesContainersContainer.AddChild(value);

        _zoneContainerEntries = sorted;
    }

    private ZoneContainerEntry GetZoneDataEntry(Entity<ZonesContainerComponent> entity)
    {
        var entry = new ZoneContainerEntry(entity);
        entry.ZoneEntryToggled += OnZoneEntryToggled;
        entry.DeleteContainerButton.OnConfirmed += delegate
        {
            _zones.ExecuteDeleteZonesContainer(entity);
        };
        return entry;
    }

    private void OnZoneEntryToggled(ZoneEntry entry)
    {
        if (SelectedZoneEntry == entry)
            DeselectEntry();
        else
            SelectEntry(entry);
    }

    private void SelectEntry(ZoneEntry entry)
    {
        if (SelectedZoneEntry is { } selected && selected != entry)
            selected.Pressed = false;

        entry.Pressed = true;
        SelectedZoneEntry = entry;
        _zones.SelectZone(entry.ZoneEntity);
    }

    private void DeselectEntry()
    {
        if (SelectedZoneEntry is { } selected)
            selected.Pressed = false;

        SelectedZoneEntry = null;
        _zones.SelectZone(null);
    }

    private void ApplySearchFilter(LineEdit.LineEditEventArgs args)
    {
        foreach (var entry in _zoneContainerEntries.Values)
            entry.ApplyFilter(args.Text);
    }

    private void SetStateEntity(Entity<ZoneComponent>? entity)
    {
        var visible = entity != null;
        if (visible)
        {
            var titleHeight = TitleLabel.Size.Y + TitleLabel.Margin.SumVertical;
            var minHeight = Math.Max(MinHeight, _statePanel.MinHeight + OptionsPanel.Margin.SumVertical + ContentsContainer.Margin.SumVertical + titleHeight);
            MinSize = new Vector2(MinHeight, minHeight);
        }
        else
            MinSize = _baseMinSize;

        OptionsPanel.Visible = visible;
        _statePanel.ZoneEntity = entity;
    }
}
