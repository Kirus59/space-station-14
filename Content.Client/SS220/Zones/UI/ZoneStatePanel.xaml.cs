
using Content.Shared.SS220.Zones.Components;
using Content.Shared.SS220.Zones.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneStatePanel : PanelContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public Entity<ZoneComponent>? ZoneEntity
    {
        get => _zoneEntity;
        set
        {
            _zoneEntity = value;
            Refresh();
        }
    }

    private Entity<ZoneComponent>? _zoneEntity;

    public ZoneStatePanel(Entity<ZoneComponent>? entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _zoneEntity = entity;
        Refresh();
    }

    public void Refresh()
    {
        _entityManager.TryGetComponent<MetaDataComponent>(_zoneEntity, out var meta);

        NameLineEdit.Text = !string.IsNullOrEmpty(meta?.EntityName) ? meta.EntityName : string.Empty;
        PrototypeIDLineEdit.Text = meta?.EntityPrototype?.ID ?? SharedZonesSystem.BaseZoneId;
        HexColorLineEdit.Text = (_zoneEntity?.Comp.Color ?? SharedZonesSystem.DefaultColor).ToHex();

        ContainerNetIDLineEdit.Text = _zoneEntity?.Comp.Container?.ToString() ?? string.Empty;
        Box2ListContainer.RemoveAllChildren();
        if (_zoneEntity?.Comp.Boxes is { } boxes)
        {
            foreach (var box in boxes)
            {
                var entry = new ZoneBoxEntry(box);
                Box2ListContainer.AddChild(entry);
            }
        }
    }
}
