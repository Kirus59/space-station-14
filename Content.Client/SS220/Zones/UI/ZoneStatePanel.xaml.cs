
using Content.Client.SS220.BoxLayout;
using Content.Client.SS220.Zones.Systems;
using Content.Shared.SS220.Maths;
using Content.Shared.SS220.Zones.Components;
using Content.Shared.SS220.Zones.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using System.Numerics;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneStatePanel : PanelContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IBoxLayoutManager _boxLayoutManager = default!;
    private readonly ZonesSystem _zones = default!;

    public Action<ZoneParams>? ParamsChanged;

    public Entity<ZoneComponent>? ZoneEntity
    {
        get => _zoneEntity;
        set => SetZoneEntity(value);
    }

    private Entity<ZoneComponent>? _zoneEntity;

    public ZoneParams Params
    {
        get => GetParams();
        set
        {
            _params = value;
            CancelLayout();
            Refresh();
            ParamsChanged?.Invoke(value);
        }
    }

    private ZoneParams _params;
    private BoxLayoutMode _layoutMode = BoxLayoutMode.Adding;

    public ZoneStatePanel(Entity<ZoneComponent>? entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _zones = _entityManager.System<ZonesSystem>();
        SetZoneEntity(entity);

        AddBoxButton.OnPressed += _ => StartLayout(BoxLayoutMode.Adding);
    }

    protected override void ExitedTree()
    {
        RemoveLayoutReact();
        base.ExitedTree();
    }

    public ZoneStatePanel(ZoneParams @params) : this(null)
    {
        _params = @params;
        Refresh();
    }

    public void Refresh()
    {
        NameLineEdit.Text = _params.Name;
        PrototypeIDLineEdit.Text = _params.ProtoId;
        HexColorLineEdit.Text = _params.Color.ToHex();
        ContainerNetIDLineEdit.Text = _params.Container.IsValid() ? _params.Container.ToString() : string.Empty;

        Box2ListContainer.RemoveAllChildren();
        foreach (var box in _params.Boxes)
        {
            var entry = new ZoneBoxEntry(box);
            Box2ListContainer.AddChild(entry);
        }
    }

    public void SetZoneEntity(Entity<ZoneComponent>? entity)
    {
        Params = entity != null ? _zones.GetZoneParams(entity.Value) : new ZoneParams();
    }

    private void StartLayout(BoxLayoutMode mode)
    {
        if (_boxLayoutManager.Active)
            return;

        _layoutMode = mode;

        switch (mode)
        {
            case BoxLayoutMode.Adding:
                _boxLayoutManager.StartNewBox();
                break;

            case BoxLayoutMode.Deleting:
                _boxLayoutManager.StartNewBox();
                _boxLayoutManager.SetColor(Color.Red);
                break;
        }

        AddLayotReact();
        _boxLayoutManager.SetOverlay(true);
    }

    private void CancelLayout()
    {
        if (!_boxLayoutManager.Active)
            return;

        _boxLayoutManager.Cancel();
        RemoveLayoutReact();
        _boxLayoutManager.SetOverlay(false);
    }

    private void AddLayotReact()
    {
        _boxLayoutManager.Ended += OnLayoutEnded;
        _boxLayoutManager.Cancelled += OnLayoutCancelled;

        AddBoxButton.Disabled = true;
    }

    private void RemoveLayoutReact()
    {
        _boxLayoutManager.Ended -= OnLayoutEnded;
        _boxLayoutManager.Cancelled -= OnLayoutCancelled;

        AddBoxButton.Disabled = false;
    }

    private void OnLayoutEnded(BoxLayoutManager.BoxParams @params)
    {
        if (@params.Parent != _params.Container)
            return;

        var newBoxes = _params.Boxes.ToList();
        switch (_layoutMode)
        {
            case BoxLayoutMode.Adding:
                newBoxes.Add(@params.Box);
                break;

            case BoxLayoutMode.Deleting:
                newBoxes = MathHelperExtensions.SubstructBox(newBoxes, @params.Box).ToList();
                break;
        }

        newBoxes = newBoxes.Select(b =>
        {
            var x1 = MathF.Round(b.BottomLeft.X, 2);
            var y1 = MathF.Round(b.BottomLeft.Y, 2);
            var x2 = MathF.Round(b.TopRight.X, 2);
            var y2 = MathF.Round(b.BottomLeft.X, 2);
            return Box2.FromTwoPoints(new Vector2(x1, y1), new Vector2(x2, y2));
        }).ToList();

        ChangeParams((ref ZoneParams p) =>
        {
            p.Boxes = newBoxes.ToHashSet();
        });
        RemoveLayoutReact();
        _boxLayoutManager.SetOverlay(false);
    }

    private void OnLayoutCancelled()
    {
        RemoveLayoutReact();
        _boxLayoutManager.SetOverlay(false);
    }

    private void ChangeParams(ActionRefZoneParams action)
    {
        var newParam = _params;
        action.Invoke(ref newParam);
        Params = newParam;
    }

    private delegate void ActionRefZoneParams(ref ZoneParams param);

    public ZoneParams GetParams()
    {
        return _params;
    }

    private enum BoxLayoutMode
    {
        Adding,
        Deleting
    }
}
